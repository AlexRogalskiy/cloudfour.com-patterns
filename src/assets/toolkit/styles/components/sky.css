/** @define Sky */

:root {
  --Sky-background-color: var(--color-blue);
  --Sky-background-color-dark: color(var(--color-navy) h(+5) s(-12) l(+18));
  --Sky-color: var(--color-white);

  --Sky-clouds-image: svg-load("sky-clouds.svg");
  --Sky-clouds-image-height: calc(30 / 16 * 1rem);
  --Sky-clouds-image-width: calc(525 / 16 * 1rem);
  --Sky-clouds-x-offset: -60%;

  --Sky-nav-controls-space-x: var(--space-md);
  --Sky-nav-controls-space-y: var(--space-xs);
  --Sky-nav-logo-color: var(--Sky-color);
  --Sky-nav-logo-height: 5em;
  --Sky-nav-logo-width: var(--Sky-nav-logo-height);
  --Sky-nav-logo-padding: var(--Sky-nav-controls-space-y) var(--Sky-nav-controls-space-x);
  --Sky-nav-color-inactive: color(var(--Sky-background-color) s(+10%) l(90%));

  --Sky-nav-menu-background-image: linear-gradient(to bottom, var(--Sky-background-color-dark), var(--Sky-background-color));
  --Sky-nav-menu-item-border-color: color(var(--color-black) a(10%));
  --Sky-nav-menu-item-border-width: var(--control-stroke);
  --Sky-nav-menu-item-font-size: var(--font-size-md);
  --Sky-nav-menu-item-line-height: var(--line-height-xs);
  --Sky-nav-menu-item-transition-duration: var(--motion-duration-md);
  --Sky-nav-menu-item-transition-timing-function: var(--motion-timing-function-default);
  --Sky-nav-menu-space: var(--space-sm);

  --Sky-scene-object-x-offset: calc(2 / 3 * 100%);
  --Sky-scene-object-x-offset-full: 75%;
  --Sky-scene-object-width: calc(1rem * var(--ms-ratio) * 19);
  --Sky-scene-object-width-full: calc(1rem * var(--ms-ratio) * 22);
  --Sky-scene-object-max-width: none;
  --Sky-scene-object-max-width-full: 45%;
  --Sky-scene-content-space-y: calc(1rem * var(--ms-ratio) * 10);
  --Sky-scene-content-space-y-full: calc(1rem * var(--ms-ratio) * 4);
}

@custom-media --Sky-nav-expanded-viewport (width >= 36em);
@custom-media --Sky-nav-full-viewport (width >= 75em);
@custom-media --Sky-scene-full-viewport (--md-viewport);

/**
 * 1. Keep absolute-positioned elements from leaving this container.
 */

.Sky {
  position: relative; /* 1 */
  color: var(--Sky-color);
  background-color: var(--Sky-background-color);
}

/**
 * Modifier: clouds ☁️
 *
 * 1. Add bottom padding equal to the cloud height to keep content from
 *    overlapping our whimsical dreamscape.
 */

.Sky--clouds {
  padding-bottom: var(--Sky-clouds-image-height); /* 1 */
}

/**
 * Pseudo element for actual clouds, allows clouds to overlay other elements.
 *
 * 1. Non-zero horizontal position adds visual interest for nerds like us who
 *    resize their browser. It also makes the compositions feel a little more
 *    organic (though YMMV).
 * 2. Though not a requirement, setting the `background-size` to a proportional
 *    unit will make the clouds grow and shrink with the base `font-size`.
 */

.Sky--clouds::after {
  position: absolute;
  bottom: 0;
  left: 0;

  width: 100%;
  height: var(--Sky-clouds-image-height);

  content: "";

  background-image: var(--Sky-clouds-image);
  background-repeat: repeat-x;
  background-position: var(--Sky-clouds-x-offset) bottom; /* 1 */
  background-size: var(--Sky-clouds-image-width); /* 2 */
}

/**
 * Child element defaults
 */

.Sky a,
.Sky a:matches(:--enter, :active),
.Sky :--headings {
  color: var(--Sky-color);
}

/**
 * Sky nav
 *
 * This optional child element would totally be its own separate component if
 * the design of the menu on small screens wasn't so tied to the sky
 * aesthetic. A close call for sure, though!
 */

/**
 * 1. Align items vertically.
 * 2. We let items wrap initially because we want the menu to be above the
 *    other elements on narrow screens.
 */

.Sky-nav {
  display: flex;
  align-items: center; /* 1 */
  flex-wrap: wrap;
}

/**
 * On larger screens, we turn off the wrapping so that the nav items will
 * fit on the same row as the logo.
 */

@media (--Sky-nav-expanded-viewport) {
  .Sky-nav {
    flex-wrap: nowrap;
  }
}

/**
 * 1. Move this item all the way to the right. Thanks, Flexbox! 👍
 * 2. Override default list styles.
 * 3. Bump this to the end of the visual order. We want it to still be first in
 *    the source so users of assistive devices won't need to wait to skip to
 *    content or navigation.
 */

.Sky-nav-controls {
  margin-left: auto; /* 1 */
  padding: var(--Sky-nav-controls-space-y) var(--Sky-nav-controls-space-x);
  list-style: none; /* 2 */
  order: 1; /* 3 */
}

/**
 * When the nav is expanded, no controls will be visible until keyboard focus.
 * We omit the padding to minimize layout impact of the containing element.
 */

@media (--Sky-nav-expanded-viewport) {
  .Sky-nav-controls {
    padding: 0;
  }
}

/**
 * "Skip to main content" link is only visible on keyboard focus, so we have
 * it cover the "menu" button at small sizes when visible.
 */

.Sky-nav-controls-skipToMain {
  position: absolute;
  right: var(--Sky-nav-controls-space-x);
}

/**
 * At larger sizes, position the "skip to main content" link top-center and
 * hide the "menu" toggle entirely.
 */

@media (--Sky-nav-expanded-viewport) {
  .Sky-nav-controls-skipToMain {
    top: var(--space-xs);
    right: 50%;
    transform: translateX(50%);
  }

  .Sky-nav-controls-skipToMenu {
    display: none;
  }
}

/**
 * Logo
 */

.Sky-nav-logo {
  padding: var(--Sky-nav-logo-padding);
}

/**
 * 1. Most embeds are `inline-block` by default, which results in an unsightly
 *    bottom space. Yuck.
 * 2. We set the size in proportionate units so it will grow and shrink with
 *    the base `font-size`.
 * 3. Most browsers will accept `height: auto` for this, but Safari doesn't
 *    for some reason. ¯\_(ツ)_/¯
 */

.Sky-nav-logo-object {
  display: block; /* 1 */
  width: var(--Sky-nav-logo-width); /* 2 */
  height: var(--Sky-nav-logo-width); /* 3 */
}

/**
 * 1. Hidden by default.
 * 2. Add a bit of space between this the last nav item and the logo and menu
 *    toggle on large screens.
 * 3. Presumably a nice gradient to give the impression of the night sky. For
 *    best performance while animating, avoid transparency!
 * 4. Occupy the full container width by default.
 * 5. Act like this element is the first child in the source order. Magic!
 */

.Sky-nav-menu {
  display: none; /* 1 */
  padding-bottom: var(--Sky-nav-menu-space); /* 2 */
  background-image: var(--Sky-nav-menu-background-image); /* 3 */
  flex: 100%; /* 4 */
  order: -1; /* 5 */
}

/**
 * When this element's ID matches the current window hash, or if it has the
 * `.is-open` class, make it visible.
 */

.Sky-nav-menu:matches(:target:not(.is-active), .is-open) {
  display: block;
}

/**
 * 1. At large enough screens, make the menu _always_ visible.
 * 2. Remove the bump (since it won't be above anything at this point).
 * 3. Reset the background.
 * 4. Reset the order.
 */

@media (--Sky-nav-expanded-viewport) {
  .Sky-nav-menu {
    display: block; /* 1 */
    padding-bottom: 0; /* 2 */
    background: transparent; /* 3 */
    order: 0; /* 4 */
  }
}

/**
 * Override default list styles
 */

.Sky-nav-menu-items {
  padding: 0;
  list-style: none;
}

/**
 * 1. At large sizes, display elements in a row.
 * 2. Add some extra whitespace all around.
 * 3. Let items wrap if they overflow.
 * 4. Align items to the right end of the container.
 */

@media (--Sky-nav-expanded-viewport) {
  .Sky-nav-menu-items {
    display: flex; /* 1 */
    margin: var(--Sky-nav-menu-space); /* 2 */
    flex-wrap: wrap; /* 3 */
    justify-content: flex-end; /* 4 */
  }
}

@media (--Sky-nav-full-viewport) {
  /**
   * Don't allow items to wrap to multiple rows anymore.
   */

  .Sky-nav-menu-items {
    flex-wrap: nowrap;
  }

  /**
   * Distribute space evenly while allowing items to occupy full list-item
   * width (larger hit areas are almost always good).
   */

  .Sky-nav-menu-items > li {
    flex: 1 1 auto;
  }
}

/**
 * 1. Occupy all of the container and obey the padding (2).
 * 2. See?  Padding. What'd I tell ya?
 * 3. Don't let menu labels wrap because they look ugly.
 * 4. Add dividers between items.
 * 5. Transition for hover effect at large sizes.
 */

.Sky-nav-menu-item {
  display: block; /* 1 */
  padding: var(--Sky-nav-menu-space); /* 2 */
  font-size: var(--Sky-nav-menu-item-font-size);
  line-height: var(--Sky-nav-menu-item-line-height);
  white-space: nowrap; /* 3 */
  text-align: center;
  text-decoration: none;
  border-bottom: var(--Sky-nav-menu-item-border-width) solid var(--Sky-nav-menu-item-border-color); /* 4 */
  transition: color var(--Sky-nav-menu-item-transition-duration) var(--Sky-nav-menu-item-transition-timing-function); /* 5 */
}

@media (--Sky-nav-expanded-viewport) {
  /**
   * When the nav is horizontal, ditch those dividers.
   */

  .Sky-nav-menu-item {
    border-bottom: 0;
  }

  /**
   * When the cursor is over the nav items, lighten any that aren't being
   * hovered directly.
   *
   * TODO: Currently this triggers even if the cursor is over _no_ other items,
   * which can cause the entire list to fade.
   */

  .Sky-nav-menu-items:hover .Sky-nav-menu-item:not(:hover) {
    color: var(--Sky-nav-color-inactive);
  }
}

/**
 * Sky scene
 *
 * Overlap text with imagery.
 */

/**
 * 1. Allow child elements to position themselves absolutely relative to this
 *    container.
 * 2. Don't allow child elements to show outside this element. Allows overlap
 *    with clouds when Sky--clouds modifier is applied.
 */

.Sky-scene {
  position: relative; /* 1 */

  overflow: hidden; /* 2 */
}

/**
 * Counteract Sky--clouds padding so clouds overlap content
 */

.Sky--clouds .Sky-scene {
  margin-bottom: calc(var(--Sky-clouds-image-height) * -1);
  padding-bottom: var(--Sky-clouds-image-height);
}

/**
 * Image in scene
 *
 * 1. Position absolutely.
 * 2. Center at two-thirds of the container's width.
 * 3. Set a hard width for narrow viewports.
 * 4. Make sure max-width isn't set until a later media query.
 */

.Sky-scene-object {
  position: absolute; /* 1 */
  left: var(--Sky-scene-object-x-offset); /* 2 */

  width: var(--Sky-scene-object-width); /* 3 */
  max-width: var(--Sky-scene-object-max-width); /* 4 */

  transform: translateX(-50%); /* 2 */
}

@media (--Sky-scene-full-viewport) {
  /**
   * 1. Center at three-fourths of the container's width.
   * 2. Increase the width...
   * 3. ...but constrain it as well.
   */

  .Sky-scene-object {
    left: var(--Sky-scene-object-x-offset-full); /* 1 */

    width: var(--Sky-scene-object-width-full); /* 2 */
    max-width: var(--Sky-scene-object-max-width-full); /* 3 */
  }
}

/**
 * Text content for scene
 *
 * 1. Show on top of the preceding object.
 * 2. Give some space beforehand for imagery.
 */

.Sky-scene-content {
  position: relative; /* 1 */

  margin-top: var(--Sky-scene-content-space-y); /* 2 */
}

@media (--Sky-scene-full-viewport) {
  /**
   * Now that image is on the side, adopt even margins on either end.
   */

  .Sky-scene-content {
    margin-top: calc(var(--Sky-scene-content-space-y-full) / 2);
    margin-bottom: calc(var(--Sky-scene-content-space-y-full) / 2);
  }
}
