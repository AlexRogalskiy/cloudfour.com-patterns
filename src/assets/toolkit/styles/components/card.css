/** @define Card */

:root {
  --Card-bg: var(--color-white);
  --Card-border-color: var(--color-gray);
  --Card-border-width: var(--border-width-md);
  --Card-main-color: color(var(--color-navy) l(+10%));
  --Card-main-color-emphasis: var(--link-color);
  --Card-mainObject-size: calc(var(--ms5) * 1em);
  --Card-meta-bg: color(var(--color-gray) l(+5%));
  --Card-meta-color: color(#657BAE l(-10%));
  --Card-pad: var(--space-md);
  --Card-pad-sm: var(--space-sm);
}

/**
 * 1. Establish a border and background to cover all bases for offsetting from
 *    containing elements.
 * 2. Use Flexbox to allow main element to grow in cases where the element is
 *    stretched.
 * 3. Set up preferences for animation.
 */

.Card {
  background-color: var(--Card-bg); /* 1 */
  border: var(--Card-border-width) solid var(--Card-border-color); /* 1 */
  display: flex; /* 2 */
  flex-direction: column; /* 2 */
  transform-origin: center; /* 3 */
  transition: transform 0.2s easeInOutQuad; /* 3 */
}

/**
 * Animation effect
 */

.Card:--enter {
  transform: scale(1.05);
}

/**
 * 1. Center text within this element. Useful when element is in grid and its
 *    height is stretched.
 * 2. Make this element expand to fill free space.
 * 3. Allow children to position themselves relative to this element.
 * 4. Override default link style for this element only.
 */

.Card-main {
  align-items: center; /* 1 */
  display: flex; /* 1 */
  flex: 1; /* 2 */
  padding: var(--Card-pad);
  position: relative; /* 3 */
  text-decoration: none; /* 4 */
}

/**
 * This is a hack to allow this element to succinctly override container
 * anchor styles (ex: `Sky a`) without resorting to `!important`, which is
 * harder to override.
 */

.Card-main.Card-main {
  color: var(--Card-main-color);
}

/**
 * Highlight text on interaction, highlight emphasis elements always
 */

.Card-main.Card-main:--enter,
.Card-main.Card-main :matches(b, strong, i, em) {
  color: var(--Card-main-color-emphasis);
}

/**
 * 1. Set predictable size of element.
 * 2. Position in the top-right corner.
 */

.Card-mainObject {
  height: var(--Card-mainObject-size); /* 1 */
  position: absolute; /* 2 */
  right: var(--Card-pad); /* 2 */
  top: var(--Card-pad); /* 2 */
  width: var(--Card-mainObject-size); /* 1 */
}

/**
 * Reset font of the main content element to encourage use of whichever element
 * is most semantic.
 */

.Card-mainContent {
  font: inherit;
}

/**
 * When main content follows the main object, account for its presence by
 * floating a phantom object to the right. This allows us to vertically center
 * the text but also wrap around the image to make the most use of the space.
 */

.Card-mainObject + .Card-mainContent::before {
  content: "";
  float: right;
  height: var(--Card-mainObject-size);
  margin-left: var(--Card-pad-sm);
  width: var(--Card-mainObject-size);
}

/**
 * Meta (footer) container
 */

.Card-meta {
  background-color: var(--Card-meta-bg);
  color: var(--Card-meta-color);
  padding: var(--Card-pad-sm) var(--Card-pad);
}

/**
 * Optional subdued link styles for meta
 */

.Card-metaLink {
  color: inherit;
}

.Card-metaLink:not(:hover, :focus, :active) {
  text-decoration: none;
}
