/**
 * Apply a full `border` to one or more sides of an element.
 */

@define-mixin makeBorderUtils $value, $suffix {
  .u-border$(suffix) {
    border: $(value) var(--rule-style) var(--rule-color) !important;
  }

  .u-borderTop$(suffix) {
    border-top: $(value) var(--rule-style) var(--rule-color) !important;
  }

  .u-borderBottom$(suffix) {
    border-bottom: $(value) var(--rule-style) var(--rule-color) !important;
  }

  .u-borderLeft$(suffix) {
    border-left: $(value) var(--rule-style) var(--rule-color) !important;
  }

  .u-borderRight$(suffix) {
    border-right: $(value) var(--rule-style) var(--rule-color) !important;
  }
}

@mixin makeBorderUtils var(--rule-width-sm), Sm;
@mixin makeBorderUtils var(--rule-width-md), Md;

/**
 * Remove borders from one or more sides of an element.
 */

.u-borderNone {
  border-style: none !important;
}

.u-borderTopNone {
  border-top-style: none !important;
}

.u-borderBottomNone {
  border-bottom-style: none !important;
}

.u-borderLeftNone {
  border-left-style: none !important;
}

.u-borderRightNone {
  border-right-style: none !important;
}

/**
 * Apply a `border-width` to one or more sides of an element. This is intended
 * for cases where you wish to retain the current `border-style` or
 * `border-color` of the target.
 */

@define-mixin makeBorderWidthUtils $value, $suffix {
  .u-borderWidth$(suffix) {
    border-width: $(value) !important;
  }

  .u-borderTopWidth$(suffix) {
    border-top-width: $(value) !important;
  }

  .u-borderBottomWidth$(suffix) {
    border-bottom-width: $(value) !important;
  }

  .u-borderLeftWidth$(suffix) {
    border-left-width: $(value) !important;
  }

  .u-borderRightWidth$(suffix) {
    border-right-width: $(value) !important;
  }
}

@mixin makeBorderWidthUtils var(--rule-width-sm), Sm;
@mixin makeBorderWidthUtils var(--rule-width-md), Md;

/**
 * Apply `border-radius` at the small viewport size.
 */
@media (--sm-viewport) {
  .u-sm-borderRadius {
    border-radius: var(--control-radius);
  }
}
