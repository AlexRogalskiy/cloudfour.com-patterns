/** @define utilities */

/**
 * Apply the Lobotomized Owl selector on child sibling elements within.
 * http://alistapart.com/article/axiomatic-css-and-lobotomized-owls
 */

.u-spaceChildren > * + * {
  margin-top: var(--base-margin) !important;
}

/**
 * Edge space utilities
 *
 * TODO: Clean this up once we've updated to latest PostCSS
 */

@define-mixin makeMarginUtils $value, $suffix, $prefix {
  .u-$(prefix)margin$(suffix),
  .u-$(prefix)marginEnds$(suffix),
  .u-$(prefix)marginTop$(suffix) {
    margin-top: $(value) !important;
  }

  .u-$(prefix)margin$(suffix),
  .u-$(prefix)marginEnds$(suffix),
  .u-$(prefix)marginBottom$(suffix) {
    margin-bottom: $(value) !important;
  }

  .u-$(prefix)margin$(suffix),
  .u-$(prefix)marginSides$(suffix),
  .u-$(prefix)marginLeft$(suffix) {
    margin-left: $(value) !important;
  }

  .u-$(prefix)margin$(suffix),
  .u-$(prefix)marginSides$(suffix),
  .u-$(prefix)marginRight$(suffix) {
    margin-right: $(value) !important;
  }
}

@define-mixin makePaddingUtils $value, $suffix, $prefix {
  .u-$(prefix)padding$(suffix),
  .u-$(prefix)paddingEnds$(suffix),
  .u-$(prefix)paddingTop$(suffix) {
    padding-top: $(value) !important;
  }

  .u-$(prefix)padding$(suffix),
  .u-$(prefix)paddingEnds$(suffix),
  .u-$(prefix)paddingBottom$(suffix) {
    padding-bottom: $(value) !important;
  }

  .u-$(prefix)padding$(suffix),
  .u-$(prefix)paddingSides$(suffix),
  .u-$(prefix)paddingLeft$(suffix) {
    padding-left: $(value) !important;
  }

  .u-$(prefix)padding$(suffix),
  .u-$(prefix)paddingSides$(suffix),
  .u-$(prefix)paddingRight$(suffix) {
    padding-right: $(value) !important;
  }
}

@mixin makeMarginUtils var(--space-xs), Xs;
@mixin makeMarginUtils var(--space-sm), Sm;
@mixin makeMarginUtils var(--space-md), Md;
@mixin makeMarginUtils var(--space-lg), Lg;
@mixin makeMarginUtils auto, Auto;
@mixin makeMarginUtils 0, None;

@mixin makePaddingUtils var(--space-xs), Xs;
@mixin makePaddingUtils var(--space-sm), Sm;
@mixin makePaddingUtils var(--space-md), Md;
@mixin makePaddingUtils var(--space-lg), Lg;
@mixin makePaddingUtils 0, None;

@media (--sm-viewport) {
  @mixin makeMarginUtils var(--space-xs), Xs, sm-;
  @mixin makeMarginUtils var(--space-sm), Sm, sm-;
  @mixin makeMarginUtils var(--space-md), Md, sm-;
  @mixin makeMarginUtils var(--space-lg), Lg, sm-;
  @mixin makeMarginUtils auto, Auto, sm-;
  @mixin makeMarginUtils 0, None, sm-;

  @mixin makePaddingUtils var(--space-xs), Xs, sm-;
  @mixin makePaddingUtils var(--space-sm), Sm, sm-;
  @mixin makePaddingUtils var(--space-md), Md, sm-;
  @mixin makePaddingUtils var(--space-lg), Lg, sm-;
  @mixin makePaddingUtils 0, None, sm-;
}

@media (--md-viewport) {
  @mixin makeMarginUtils var(--space-xs), Xs, md-;
  @mixin makeMarginUtils var(--space-sm), Sm, md-;
  @mixin makeMarginUtils var(--space-md), Md, md-;
  @mixin makeMarginUtils var(--space-lg), Lg, md-;
  @mixin makeMarginUtils auto, Auto, md-;
  @mixin makeMarginUtils 0, None, md-;

  @mixin makePaddingUtils var(--space-xs), Xs, md-;
  @mixin makePaddingUtils var(--space-sm), Sm, md-;
  @mixin makePaddingUtils var(--space-md), Md, md-;
  @mixin makePaddingUtils var(--space-lg), Lg, md-;
  @mixin makePaddingUtils 0, None, md-;
}

@media (--lg-viewport) {
  @mixin makeMarginUtils var(--space-xs), Xs, lg-;
  @mixin makeMarginUtils var(--space-sm), Sm, lg-;
  @mixin makeMarginUtils var(--space-md), Md, lg-;
  @mixin makeMarginUtils var(--space-lg), Lg, lg-;
  @mixin makeMarginUtils auto, Auto, lg-;
  @mixin makeMarginUtils 0, None, lg-;

  @mixin makePaddingUtils var(--space-xs), Xs, lg-;
  @mixin makePaddingUtils var(--space-sm), Sm, lg-;
  @mixin makePaddingUtils var(--space-md), Md, lg-;
  @mixin makePaddingUtils var(--space-lg), Lg, lg-;
  @mixin makePaddingUtils 0, None, lg-;
}
